Class PK_BaseActor : Actor
{
	protected int PK_Flag;
	FlagDef FourDirSprite : PK_Flag, 0;
}

Enum PK_ActorDir
{
	PK_FEast = 0,
	PK_FSouth = 90,
	PK_FWest = 180,
	PK_FNorth = 270,
}

Class PK_BaseNPC : PK_BaseActor
{
	Default
	{
		+PK_BaseActor.FourDirSprite;
		
		+NoFriction;
		+Solid;
		
		Radius 8;
		Height 16;
	}
	
	int prevDirection;
	string actorstate;
	string facing;
	string activity;
	
	int steps;
	int microsteps;
	double direction;
	
	bool teleporting;
	
	void MoveDir(double _dir, Int _steps)
	{
		if (microsteps) return;
		
		steps = _steps;
		microsteps = 7 * _steps;
		direction = _dir;
	}
	
	static double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
	
	override void Tick()
	{
		if (steps)
		{
			double dist = (16 / 7);
			double x = dist * cos(self.angle);
			double y = dist * sin(self.angle);
			
			self.vel.x = x;
			self.vel.y = y;
			
			--microsteps;
			if(!microsteps)
			{
				--steps;
				
				let roundpos = self.pos;
				roundpos.x -= (roundpos.x % 16);
				roundpos.y -= (roundpos.y % 16);
				
				if (steps) microsteps = 7;
			}
		}
		
		Super.tick();
		
		if (!steps)
		{
			self.A_Stop();
		}
		
		self.angle = self.direction;
		
		SetActorAngle();
	}
	
	virtual int getFrameAngle()
	{
		let player = players[consoleplayer].mo;
		
		if (!player) return 0;
		
		double angle = player.angleTo(self);
		if (angle < 0) angle += 360;
		double s_angle = self.angle;
		while (s_angle < 0) s_angle += 360;
		s_angle = s_angle % 360;
		angle -= s_angle;
		angle = angle % 360;
		
		if (angle > 135 && angle <= 225) return 0;
		if (angle > 45 && angle <= 135) return 1;
		if (angle > 315 || angle <= 45) return 2;
		if (angle > 225 && angle <= 315) return 3;
		
		return gametic % 4; //SPEEEEEN indicator that this function is broke
	}
	
	void SetActorAngle()
	{
		int dir = getFrameAngle();
		
		if (prevDirection != dir)
		{
			switch (dir)
			{
				case 0:
					facing = "south";
					if (microsteps > 0)
					{
						activity = "Moving";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Moving.South");
						}
					}
					else
					{
						activity = "Facing";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Facing.South");
						}
					}
					break;
				case 1:
					facing = "East";
					if (microsteps > 0)
					{
						activity = "Moving";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Moving.East");
						}
					}
					else
					{
						activity = "Facing";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Facing.East");
						}
					}
					break;
				case 2:
					facing = "North";
					if (microsteps > 0)
					{
						activity = "Moving";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Moving.North");
						}
					}
					else
					{
						activity = "Facing";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Facing.North");
						}
					}
					break;
				case 3:
					facing = "West";
					if (microsteps > 0)
					{
						activity = "Moving";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Moving.West");
						}
					}
					else
					{
						activity = "Facing";
						if (actorstate != (facing .. "." .. activity))
						{
							actorstate = facing .. "." .. activity;
							SetStateLabel("Facing.West");
						}
					}
					break;
			}
		}
	}
	
	States
	{
		Spawn:
			NW00 B 1;
		Facing.East:
			NW00 B 1;
			Loop;
		Moving.East:
			NW00 B 3;
			NW00 D 7;
			NW00 B 3;
			goto Facing.east;
		Facing.West:
			NW00 A 1;
			Loop;
		Moving.West:
			NW00 A 3;
			NW00 C 7;
			NW00 A 3;
			goto Facing.West;
		Facing.South:
			NS00 E 1;
			Loop;
		Moving.South:
			NS00 E 3;
			NS00 F 7;
			NS00 E 3;
			NS00 G 7;
			goto Facing.South;
		Facing.North:
			NN00 H 1;
			Loop;
		Moving.North:
			NN00 H 3;
			NN00 I 7;
			NN00 H 3;
			NN00 J 7;
	}
}