Class PK_MapSpot : SectorAction
{
	Default
	{
		//$Category Covalent Tools
		//$Title PK Map Spot
	}
	
	override void BeginPlay()
	{}
}

Class PK_SectorAction : PK_MapSpot
{
	bool enabled;
	
	override void BeginPlay ()
	{
		super.BeginPlay();
		
		enabled = true;

		tracer = CurSector.SecActTarget;
		CurSector.SecActTarget = self;
	}
}

Class PK_TeleportTrigger : PK_SectorAction
{
	Default
	{
		//$Category Covalent Tools
		//$Title Teleport Trigger
		//$arg0 Destination Actor Tag
		
		Height 16;
		Radius 6;
	}
	
	
	Actor destination;
	Actor toucher;
	
	override bool TriggerAction(Actor _triggerer, Int _type)
	{
		if (!enabled) return false;
		if (_type == 2) return false;
		if (self.args[0] == 0)
		{
			console.printf('No destination tag set!');
			return false;
		}
		
		let iter = Level.createActorIterator(args[0], 'PK_MapSpot');
		let spot = iter.next();
		
		if (!spot)
		{
			console.printf('Destination actor does not exist!');
			return false;
		}
		
		destination = spot;
		toucher = _triggerer;
		
		self.bDormant = true;
		
		self.setStateLabel('Activation');
		
		return false;
	}
	
	Action void A_WalkActorInto()
	{
		if (!(invoker.toucher is 'PK_BaseNPC')) return;
		
		let mo = PK_BaseNPC(invoker.toucher);
		mo.teleporting = true;
		
		mo.MoveDir(-self.angle, 2);
	}
	
	Action void A_WalkActorOut()
	{
		if (!(invoker.toucher is 'PK_BaseNPC')) return;
		
		let mo = PK_BaseNPC(invoker.toucher);
		mo.teleporting = false;
		
		mo.MoveDir(self.angle, 2);
	}
	
	Action void A_PerformTeleport()
	{
		if (invoker.destination is 'PK_TeleportTrigger')
		{
			PK_SectorAction(invoker.destination).enabled = false;
		}
		
		invoker.toucher.TeleportMove(invoker.destination.pos, false);
		
		if (invoker.toucher is 'PK_PlayerAvatar')
		{
			PK_PlayerAvatar(invoker.toucher).player.TeleportMove(invoker.destination.pos, false);
		}
	}
	
	Action void A_Resume()
	{
		if (!(invoker.destination is 'PK_SectorAction')) return;
		
		PK_SectorAction(invoker.destination).enabled = true;
	}
	
	states
	{
		Activation:
			TNT1 A 7 A_WalkActorInto();
			TNT1 A 1 A_PerformTeleport();
			TNT1 A 7 A_WalkActorOut();
			TNT1 A 0 A_Resume();
			goto Spawn;
	}
}