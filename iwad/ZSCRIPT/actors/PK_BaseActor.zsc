Class PK_BaseActor : Actor
{
	int FaceMode; //0 for always faces, 1 for has 4 directions
	
	PK_FaceDir facedir;
	property FaceDir: FaceDir;
	
	string FaceSouth;
	string FaceNorth;
	string FaceEastWest;
	
	bool user_trainer;
	
	bool user_rotating_left;
	bool user_rotating_right;
	
	property FaceMode: FaceMode;
	property FaceSouth: FaceSouth;
	property FaceNorth: FaceNorth;
	property FaceEastWest: FaceEastWest;
	
	Default
	{
		PK_BaseActor.FaceMode 1;
		PK_BaseActor.FaceDir PK_South;
		PK_BaseActor.FaceSouth "O000";
		PK_BaseActor.FaceNorth "O001";
		PK_BaseActor.FaceEastWest "O002";
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		Super.postBeginPlay();
		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		//Critical checks to make sure the mapper doesn't mess up!
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		if (user_rotating_left == true && user_rotating_right == true) ThrowAbortException("NPC's can't be rotating left and right at the same time! Please correct: " .. self.getClassName() .. " at " .. self.pos);
		
		A_SpriteFace();
	}
	
	override void Tick()
	{
		Super.Tick();
	}
	
	//0 = clockwise
	//1 = counter clockwise
	void A_Rotate(bool _clockwise = true)
	{
		switch (facedir)
		{
			case PK_North:
				if (_clockwise) facedir = PK_West;
				else facedir = PK_East;
				break;
			case PK_West:
				if (_clockwise) facedir = PK_South;
				else facedir = PK_North;
				break;
			case PK_South:
				if (_clockwise) facedir = PK_East;
				else facedir = PK_West;
				break;
			case PK_East:
				if (_clockwise) facedir = PK_North;
				else facedir = PK_South;
				break;
		}
		
		A_SpriteFace(facedir);
	}
	
	void A_SpriteFace(PK_FaceDir _dir = PK_South)
	{
		if (!facemode)
		{
			self.sprite = GetSpriteIndex(self.facesouth);
			return;
		}
		
		facedir = _dir;
		
		self.scale.x = 1;
		switch(facedir)
		{
			case PK_North:
				self.sprite = GetSpriteIndex(self.facenorth);
				break;
			case PK_West:
				self.scale.x = -1; //intentional fall through
				self.sprite = GetSpriteIndex(self.faceeastwest);;
				break;
			case PK_East:
				self.sprite = GetSpriteIndex(self.faceeastwest);
				break;
			case PK_South:
				self.sprite = GetSpriteIndex(self.facesouth);
				break;
		}
	}
	
	States
	{
		Spawn:
			O000 A 0 Bright;
			O001 A 0;
			O002 A 0;
		SpawnLoop:
			TNT1 A 1;
			Loop;
	}
}